/*
* BinaryTreeDemo1 Class
* Alex Nunes
* 27/10/2014
* Dalhousie University
* Faculty of Computer Science
*
* Demonstrates the 
*/
import java.util.*;
public class BinaryTreeDemo1 {

	public static void main(String[] args) {
		Scanner kbd = new Scanner(System.in);
		String name ="";
		BinaryTree<String> main = new BinaryTree<String>();
		
		System.out.print("Enter a name or done: ");
		name = kbd.next();
	
		while(!name.equalsIgnoreCase("done")){
			
			if(main.isEmpty()){
				main.makeRoot(name);
			}else{
				BinaryTree<String> newNode = new BinaryTree<String>();
				newNode.makeRoot(name);
				balancedAttach(main, newNode);
			}
			System.out.print("Enter a name or done: ");
			name = kbd.next();
		}
		System.out.println("\nNumber of Nodes: "+main.size());
		System.out.println("Height of Tree: "+main.getHeight());
		System.out.println("Balanced: "+main.balanced());
		System.out.print("In-Order: \t");
		BinaryTree.inorder(main);
		System.out.println();
		System.out.print("Pre-Order: \t");
		BinaryTree.preorder(main);
		System.out.println();
		System.out.print("Post-Order: \t");
		BinaryTree.postorder(main);
		System.out.println();
		System.out.print("Level Order: \t");
		BinaryTree.levelOrder(main);
		System.out.println(main.getleft().getLeft.getData());
		
	}
	
	
	/* Balanced attach method that uses recursion to determine the next spot
	 * to add a node and then adds it to create a balanced unordered tree
	 */
	public static void balancedAttach(BinaryTree<String> tree, BinaryTree<String> node){
		if(tree.getLeft()==null){
			tree.attachLeft(node);
		}else if(tree.getRight() == null){
			tree.attachRight(node);
		}else{
			if(tree.getLeft().size() > tree.getRight().size()){
				balancedAttach(tree.getRight(),node);
			}else{
				balancedAttach(tree.getLeft(),node);
			}
		}
	}

}
