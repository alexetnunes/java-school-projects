/* 
 * PrimeProgram
 * Alex Nunes
 * 22/09/2014
 * Dalhousie University
 * Faculty of Computer Science
 * 
 * Uses one of three methods to find all of the
 * prime numbers between one and a given integer
 */
import java.util.Scanner;
public class Prime {
	public static void main(String[] args) {
		//Declare Scanner and Variables
		Scanner kbd = new Scanner(System.in);
		long startTime, endTime, executionTime;
		long num;
		
		//Take in upper limit (n)
		System.out.print("Enter the upper limit:");
		num = kbd.nextLong();
		
		//Track and print result from method 1
		System.out.println();
		startTime = System.currentTimeMillis();
		PrimeMethod1(num);
		endTime = System.currentTimeMillis();
		executionTime = endTime - startTime;
		System.out.println("\nMethod1:"+num+" | Execution Time: "+executionTime+"ms");
		
		//Track and print time result from method 1
		System.out.println();
		startTime = System.currentTimeMillis();
		PrimeMethod2(num);
		endTime = System.currentTimeMillis();
		executionTime = endTime - startTime;
		System.out.println("\nMethod2:"+num+" | Execution Time: "+executionTime+"ms");
		
		System.out.println();
		startTime = System.currentTimeMillis();
		PrimeMethod3(num);
		endTime = System.currentTimeMillis();
		executionTime = endTime - startTime;
		System.out.println("\nMethod3:"+num+" | Execution Time: "+executionTime+"ms");
		
		
	}
	
	//Search through 1 - n for prime numbers
	public static void PrimeMethod1(long n){
		for(int i=2; i<=n; i++){
			boolean prime=true;
			for(int j=2; j<=i-1; j++){
				if(i%j==0){
					prime = false;
				}
			}
		}
	}
	
	//Search through 1 - n/2 for prime numbers
	public static void PrimeMethod2(long n){
		for(int i=2; i<=n; i++){
			boolean prime=true;
			for(int j=2; 2*j<=i; j++){
				if(i%j==0){
					prime = false;
				}
			}
		}
	}

	//Search through 1 - sqrt(n) for prime numbers
	public static void PrimeMethod3(long n){
		for(int i=2; i<=n; i++){
			boolean prime=true;
			for(int j=2; j*j<=i; j++){
				if(i%j==0){
					prime = false;
				}
			}
		}
	}

}
